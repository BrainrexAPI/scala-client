/**
 * Brainrex API Explorer
 * Welcome to the Brainrex API explorer, we make analytics tools for crypto and blockchain. Our currently propiertary models offer sentiment analysis, market making, blockchain monitoring and face-id verification. This AI models can be consumed from this API. We also offer integrations to open data and propietary data providers, as well as free test data we collect. There is a collection of data transformation tools. Join our Telegram group to get the latest news and ask questions [https://t.me/brainrex, #brainrex](https://t.me/brainrex). More about Brainrex at [https://brainrex.com](http://brainrex.com). Full Documentation can be found at [https://brainrexapi.github.io/docs](https://brainrexapi.github.io/docs)
 *
 * OpenAPI spec version: 0.1.1
 * Contact: support@brainrex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Text
import io.swagger.client.model.Text1
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class SentimentAnalysisApi(
  val defBasePath: String = "https://brainrexapi.appspot.com:5000/api",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new SentimentAnalysisApiAsyncHelper(client, config)

  /**
   * Sentiment analysis score using a model trained for buy signals.
   * Gives a 0 to 1 score, depending on buy/sell sentiment
   *
   * @param text String of text to be analyzed. I can be in any language. 
   * @return String
   */
  def sentimentGetPriceSentiment(text: Text1): Option[String] = {
    val await = Try(Await.result(sentimentGetPriceSentimentAsync(text), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Sentiment analysis score using a model trained for buy signals. asynchronously
   * Gives a 0 to 1 score, depending on buy/sell sentiment
   *
   * @param text String of text to be analyzed. I can be in any language. 
   * @return Future(String)
   */
  def sentimentGetPriceSentimentAsync(text: Text1): Future[String] = {
      helper.sentimentGetPriceSentiment(text)
  }

  /**
   * Sentiment analysis for any given blob of text
   * Gives a -1 to 1 score, depending on bearish/bullish sentiment
   *
   * @param text String of text to be analyzed. I can be in any language. 
   * @return String
   */
  def sentimentGetSentiment(text: Text): Option[String] = {
    val await = Try(Await.result(sentimentGetSentimentAsync(text), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Sentiment analysis for any given blob of text asynchronously
   * Gives a -1 to 1 score, depending on bearish/bullish sentiment
   *
   * @param text String of text to be analyzed. I can be in any language. 
   * @return Future(String)
   */
  def sentimentGetSentimentAsync(text: Text): Future[String] = {
      helper.sentimentGetSentiment(text)
  }

}

class SentimentAnalysisApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def sentimentGetPriceSentiment(text: Text1)(implicit reader: ClientResponseReader[String], writer: RequestWriter[Text1]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/get_buy_sentiment"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (text == null) throw new Exception("Missing required parameter 'text' when calling SentimentAnalysisApi->sentimentGetPriceSentiment")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(text))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sentimentGetSentiment(text: Text)(implicit reader: ClientResponseReader[String], writer: RequestWriter[Text]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/get_sentiment"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (text == null) throw new Exception("Missing required parameter 'text' when calling SentimentAnalysisApi->sentimentGetSentiment")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(text))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
